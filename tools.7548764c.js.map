{"mappings":"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","sources":["packages/contrast-colors/index.js","packages/contrast-colors/lib/chroma-plus.js","packages/contrast-colors/lib/utils.js","node_modules/.pnpm/apca-w3@0.1.9/node_modules/apca-w3/src/apca-w3.js","node_modules/.pnpm/colorparsley@0.1.8/node_modules/colorparsley/src/colorparsley.js","packages/contrast-colors/lib/curve.js","packages/contrast-colors/lib/color.js","packages/contrast-colors/lib/backgroundcolor.js","packages/contrast-colors/lib/theme.js"],"sourcesContent":["/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport chroma from 'chroma-js';\nimport {extendChroma} from './lib/chroma-plus.js';\nimport {convertColorValue, createScale, getContrast as contrast, luminance, minPositive, ratioName} from './lib/utils.js';\n\nimport {Color} from './lib/color.js';\nimport {BackgroundColor} from './lib/backgroundcolor.js';\nimport {Theme} from './lib/theme.js';\n\nextendChroma(chroma);\n\n// console.color('#6fa7ff');\n// console.ramp(chroma.scale(['yellow', 'navy']).mode('hsl'))\n\nexport {Color, BackgroundColor, Theme, createScale, luminance, contrast, minPositive, ratioName, convertColorValue};\n","/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport chromajs from 'chroma-js';\nimport hsluv from 'hsluv';\nimport ciebase from 'ciebase';\nimport ciecam02 from 'ciecam02';\n\nconst cam = ciecam02.cam(\n  {\n    whitePoint: ciebase.illuminant.D65,\n    adaptingLuminance: 40,\n    backgroundLuminance: 20,\n    surroundType: 'average',\n    discounting: false\n  },\n  ciecam02.cfs('JCh')\n);\n\nconst xyz = ciebase.xyz(ciebase.workspace.sRGB, ciebase.illuminant.D65);\nconst jch2rgb = (jch) => xyz.toRgb(cam.toXyz({J: jch[0], C: jch[1], h: jch[2]}));\nconst rgb2jch = (rgb) => {\n  const jch = cam.fromXyz(xyz.fromRgb(rgb));\n  return [jch.J, jch.C, jch.h];\n};\nconst [jch2jab, jab2jch] = (() => {\n  const coefs = {k_l: 1, c1: 0.007, c2: 0.0228};\n  const π = Math.PI;\n  const CIECAM02_la = 64 / π / 5;\n  const CIECAM02_k = 1 / (5 * CIECAM02_la + 1);\n  const CIECAM02_fl = 0.2 * CIECAM02_k ** 4 * (5 * CIECAM02_la) + 0.1 * (1 - CIECAM02_k ** 4) ** 2 * (5 * CIECAM02_la) ** (1 / 3);\n  return [\n    (jch) => {\n      const [J, C, h] = jch;\n      const M = C * CIECAM02_fl ** 0.25;\n      let j = ((1 + 100 * coefs.c1) * J) / (1 + coefs.c1 * J);\n      j /= coefs.k_l;\n      const MPrime = (1 / coefs.c2) * Math.log(1.0 + coefs.c2 * M);\n      const a = MPrime * Math.cos(h * (π / 180));\n      const b = MPrime * Math.sin(h * (π / 180));\n      return [j, a, b];\n    },\n    (jab) => {\n      const [j, a, b] = jab;\n      const newMPrime = Math.sqrt(a * a + b * b);\n      const newM = (Math.exp(newMPrime * coefs.c2) - 1) / coefs.c2;\n      const h = ((180 / π) * Math.atan2(b, a) + 360) % 360;\n      const C = newM / CIECAM02_fl ** 0.25;\n      const J = j / (1 + coefs.c1 * (100 - j));\n      return [J, C, h];\n    }\n  ];\n})();\n\nconst jab2rgb = (jab) => jch2rgb(jab2jch(jab));\nconst rgb2jab = (rgb) => jch2jab(rgb2jch(rgb));\n\nconst con = console;\n\n// Usage:\n// console.color('rebeccapurple');\ncon.color = (color, text = '') => {\n  const col = chromajs(color);\n  const l = col.luminance();\n  con.log(`%c${color} ${text}`, `background-color: ${color};padding: 5px; border-radius: 5px; color: ${l > 0.5 ? '#000' : '#fff'}`);\n};\n\n// Usage:\n// console.ramp(chroma.scale(['yellow', 'navy']).mode('hsluv'));\n// console.ramp(scale, 3000); // if you need to specify the length of the scale\ncon.ramp = (scale, length = 1) => {\n  con.log('%c ', `font-size: 1px;line-height: 16px;background: ${chromajs.getCSSGradient(scale, length)};padding: 0 0 0 200px; border-radius: 2px;`);\n};\n\nconst online = (x1, y1, x2, y2, x3, y3, ε = 0.1) => {\n  if (x1 === x2 || y1 === y2) {\n    return true;\n  }\n  const m = (y2 - y1) / (x2 - x1);\n  const x4 = (y3 + x3 / m - y1 + m * x1) / (m + 1 / m);\n  const y4 = y3 + x3 / m - x4 / m;\n  return (x3 - x4) ** 2 + (y3 - y4) ** 2 < ε ** 2;\n};\n\nconst div = (ƒ, dot1, dot2, ε) => {\n  const x3 = (dot1[0] + dot2[0]) / 2;\n  const y3 = ƒ(x3);\n  if (online(...dot1, ...dot2, x3, y3, ε)) {\n    return null;\n  }\n  return [x3, y3];\n};\n\nconst split = (ƒ, from, to, ε = 0.1) => {\n  const step = (to - from) / 10;\n  const points = [];\n  for (let i = from; i < to; i += step) {\n    points.push([i, ƒ(i)]);\n  }\n  points.push([to, ƒ(to)]);\n  for (let i = 0; i < points.length - 1; i++) {\n    const dot = div(ƒ, points[i], points[i + 1], ε);\n    if (dot) {\n      points.splice(i + 1, 0, dot);\n      i--;\n    }\n  }\n  for (let i = 0; i < points.length - 2; i++) {\n    if (online(...points[i], ...points[i + 2], ...points[i + 1], ε)) {\n      points.splice(i + 1, 1);\n      i--;\n    }\n  }\n  return points;\n};\n\nconst round = (x, r = 4) => Math.round(x * 10 ** r) / 10 ** r;\n\nconst getCSSGradient = (scale, length = 1, deg = 90, ε = 0.005) => {\n  const ptsr = split((x) => scale(x).gl()[0], 0, length, ε);\n  const ptsg = split((x) => scale(x).gl()[1], 0, length, ε);\n  const ptsb = split((x) => scale(x).gl()[2], 0, length, ε);\n  const points = Array.from(new Set([...ptsr.map((a) => round(a[0])), ...ptsg.map((a) => round(a[0])), ...ptsb.map((a) => round(a[0]))].sort((a, b) => a - b)));\n  return `linear-gradient(${deg}deg, ${points.map((x) => `${scale(x).hex()} ${round(x * 100)}%`).join()});`;\n};\n\nconst extendChroma = (chroma) => {\n  // JCH\n  chroma.Color.prototype.jch = function () {\n    return rgb2jch(this._rgb.slice(0, 3).map((c) => c / 255));\n  };\n\n  chroma.jch = (...args) => new chroma.Color(...jch2rgb(args).map((c) => Math.floor(c * 255)), 'rgb');\n\n  // JAB\n  chroma.Color.prototype.jab = function () {\n    return rgb2jab(this._rgb.slice(0, 3).map((c) => c / 255));\n  };\n\n  chroma.jab = (...args) => new chroma.Color(...jab2rgb(args).map((c) => Math.floor(c * 255)), 'rgb');\n\n  // HSLuv\n  chroma.Color.prototype.hsluv = function () {\n    return hsluv.rgbToHsluv(this._rgb.slice(0, 3).map((c) => c / 255));\n  };\n\n  chroma.hsluv = (...args) => new chroma.Color(...hsluv.hsluvToRgb(args).map((c) => Math.floor(c * 255)), 'rgb');\n\n  const oldInterpol = chroma.interpolate;\n  const RGB2 = {\n    jch: rgb2jch,\n    jab: rgb2jab,\n    hsluv: hsluv.rgbToHsluv\n  };\n  const lerpH = (a, b, t) => {\n    const m = 360;\n    const d = Math.abs(a - b);\n    if (d > m / 2) {\n      if (a > b) {\n        b += m;\n      } else {\n        a += m;\n      }\n    }\n    return ((1 - t) * a + t * b) % m;\n  };\n\n  chroma.interpolate = (col1, col2, f = 0.5, mode = 'lrgb') => {\n    if (RGB2[mode]) {\n      if (typeof col1 !== 'object') {\n        col1 = new chroma.Color(col1);\n      }\n      if (typeof col2 !== 'object') {\n        col2 = new chroma.Color(col2);\n      }\n      const xyz1 = RGB2[mode](col1.gl());\n      const xyz2 = RGB2[mode](col2.gl());\n      const grey1 = Number.isNaN(col1.hsl()[0]);\n      const grey2 = Number.isNaN(col2.hsl()[0]);\n      let X;\n      let Y;\n      let Z;\n      switch (mode) {\n        case 'hsluv':\n          if (xyz1[1] < 1e-10) {\n            xyz1[0] = xyz2[0];\n          }\n          if (xyz1[1] === 0) {\n            // black or white\n            xyz1[1] = xyz2[1];\n          }\n          if (xyz2[1] < 1e-10) {\n            xyz2[0] = xyz1[0];\n          }\n          if (xyz2[1] === 0) {\n            // black or white\n            xyz2[1] = xyz1[1];\n          }\n          X = lerpH(xyz1[0], xyz2[0], f);\n          Y = xyz1[1] + (xyz2[1] - xyz1[1]) * f;\n          Z = xyz1[2] + (xyz2[2] - xyz1[2]) * f;\n          break;\n        case 'jch':\n          if (grey1) {\n            xyz1[2] = xyz2[2];\n          }\n          if (grey2) {\n            xyz2[2] = xyz1[2];\n          }\n          X = xyz1[0] + (xyz2[0] - xyz1[0]) * f;\n          Y = xyz1[1] + (xyz2[1] - xyz1[1]) * f;\n          Z = lerpH(xyz1[2], xyz2[2], f);\n          break;\n        default:\n          X = xyz1[0] + (xyz2[0] - xyz1[0]) * f;\n          Y = xyz1[1] + (xyz2[1] - xyz1[1]) * f;\n          Z = xyz1[2] + (xyz2[2] - xyz1[2]) * f;\n      }\n      return chroma[mode](X, Y, Z).alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n    }\n    return oldInterpol(col1, col2, f, mode);\n  };\n\n  chroma.getCSSGradient = getCSSGradient;\n};\n\nexport {extendChroma};\n","/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {APCAcontrast, sRGBtoY} from 'apca-w3';\nimport chroma from 'chroma-js';\nimport {catmullRom2bezier, prepareCurve} from './curve.js';\n\nconst colorSpaces = {\n  CAM02: 'jab',\n  CAM02p: 'jch',\n  HEX: 'hex',\n  HSL: 'hsl',\n  HSLuv: 'hsluv',\n  HSV: 'hsv',\n  LAB: 'lab',\n  LCH: 'lch', // named per correct color definition order\n  RGB: 'rgb',\n  OKLAB: 'oklab',\n  OKLCH: 'oklch'\n};\n\nfunction round(x, n = 0) {\n  const ten = 10 ** n;\n  return Math.round(x * ten) / ten;\n}\n\nfunction multiplyRatios(ratio, multiplier) {\n  let r;\n  // Normalize contrast ratios before multiplying by this._contrast\n  // by making 1 = 0. This ensures consistent application of increase/decrease\n  // in contrast ratios. Then add 1 back to number for contextual ratio value.\n  if (ratio > 1) {\n    r = (ratio - 1) * multiplier + 1;\n  } else if (ratio < -1) {\n    r = (ratio + 1) * multiplier - 1;\n  } else {\n    r = 1;\n  }\n\n  return round(r, 2);\n}\n\nfunction cArray(c) {\n  return chroma(String(c)).jch();\n}\n\nfunction hsluvArray(c) {\n  return chroma(String(c)).hsluv();\n}\n\nfunction smoothScale(ColorsArray, domains, space) {\n  const points = [[], [], []];\n  ColorsArray.forEach((color, i) => points.forEach((point, j) => point.push(domains[i], color[j])));\n  if (space === 'hcl') {\n    const point = points[1];\n    for (let i = 1; i < point.length; i += 2) {\n      if (Number.isNaN(point[i])) {\n        point[i] = 0;\n      }\n    }\n  }\n  points.forEach((point) => {\n    const nans = [];\n    // leading NaNs\n    for (let i = 1; i < point.length; i += 2) {\n      if (Number.isNaN(point[i])) {\n        nans.push(i);\n      } else {\n        nans.forEach((j) => {\n          point[j] = point[i];\n        });\n        nans.length = 0;\n        break;\n      }\n    }\n    // all are grey case\n    if (nans.length) {\n      // hue is not important except for JCh\n      const safeJChHue = chroma('#ccc').jch()[2];\n      nans.forEach((j) => {\n        point[j] = safeJChHue;\n      });\n    }\n    nans.length = 0;\n    // trailing NaNs\n    for (let i = point.length - 1; i > 0; i -= 2) {\n      if (Number.isNaN(point[i])) {\n        nans.push(i);\n      } else {\n        nans.forEach((j) => {\n          point[j] = point[i];\n        });\n        break;\n      }\n    }\n    // other NaNs\n    for (let i = 1; i < point.length; i += 2) {\n      if (Number.isNaN(point[i])) {\n        point.splice(i - 1, 2);\n        i -= 2;\n      }\n    }\n    // force hue to go on the shortest route\n    if (space in {hcl: 1, hsl: 1, hsluv: 1, hsv: 1, jch: 1}) {\n      let prev = point[1];\n      let addon = 0;\n      for (let i = 3; i < point.length; i += 2) {\n        const p = point[i] + addon;\n        const zero = Math.abs(prev - p);\n        const plus = Math.abs(prev - (p + 360));\n        const minus = Math.abs(prev - (p - 360));\n        if (plus < zero && plus < minus) {\n          addon += 360;\n        }\n        if (minus < zero && minus < plus) {\n          addon -= 360;\n        }\n        point[i] += addon;\n        prev = point[i];\n      }\n    }\n  });\n  const prep = points.map((point) => catmullRom2bezier(point).map((curve) => prepareCurve(...curve)));\n  return (d) => {\n    const ch = prep.map((p) => {\n      for (let i = 0; i < p.length; i++) {\n        const res = p[i](d);\n        if (res != null) {\n          return res;\n        }\n      }\n      return null;\n    });\n\n    if (space === 'jch' && ch[1] < 0) {\n      ch[1] = 0;\n    }\n\n    return chroma[space](...ch).hex();\n  };\n}\n\nfunction makePowScale(exp = 1, domains = [0, 1], range = [0, 1]) {\n  const m = (range[1] - range[0]) / (domains[1] ** exp - domains[0] ** exp);\n  const c = range[0] - m * domains[0] ** exp;\n  return (x) => m * x ** exp + c;\n}\n\nfunction createScale({swatches, colorKeys, colorspace = 'LAB', shift = 1, fullScale = true, smooth = false, distributeLightness = 'linear', sortColor = true, asFun = false} = {}) {\n  const space = colorSpaces[colorspace];\n  if (!space) {\n    throw new Error(`Colorspace “${colorspace}” not supported`);\n  }\n  if (!colorKeys) {\n    throw new Error(`Colorkeys missing: returned “${colorKeys}”`);\n  }\n\n  let domains;\n\n  if (fullScale) {\n    // Set domain of each color key based on percentage (as HSLuv lightness)\n    // against the full scale of black to white\n    domains = colorKeys\n      .map((key) => swatches - swatches * (chroma(key).jch()[0] / 100))\n      .sort((a, b) => a - b)\n      .concat(swatches);\n\n    domains.unshift(0);\n  } else {\n    // Domains need to be a percentage of the available luminosity range\n    let lums = colorKeys.map((c) => chroma(c).jch()[0] / 100);\n    let min = Math.min(...lums);\n    let max = Math.max(...lums);\n\n    domains = lums\n      .map((lum) => {\n        if (lum === 0 || isNaN((lum - min) / (max - min))) return 0;\n        else return swatches - ((lum - min) / (max - min)) * swatches;\n      })\n      .sort((a, b) => a - b);\n  }\n\n  // Test logarithmic domain (for non-contrast-based scales)\n  let sqrtDomains = makePowScale(shift, [1, swatches], [1, swatches]);\n  sqrtDomains = domains.map((d) => Math.max(0, sqrtDomains(d)));\n\n  // Transform square root in order to smooth gradient\n  domains = sqrtDomains;\n  // if(distributeLightness === 'parabolic') {\n  //   const parabola = (x) => {return (Math.sqrt(x, 2))}\n  //   let percDomains = sqrtDomains.map((d) => {return d/swatches})\n  //   let newDomains = percDomains.map((d) => {return parabola(d) * swatches})\n  //   domains = newDomains;\n  // }\n  if (distributeLightness === 'polynomial') {\n    // Equation based on polynomial mapping of lightness values in CIECAM02\n    // of the RgBu diverging color scale.\n    // const polynomial = (x) => { return 2.53906249999454 * Math.pow(x,4) - 6.08506944443434 * Math.pow(x,3) + 5.11197916665992 * Math.pow(x,2) - 2.56537698412552 * x + 0.999702380952327; }\n    // const polynomial = (x) => { return Math.sqrt(Math.sqrt(x)) }\n    const polynomial = (x) => {\n      return Math.sqrt(Math.sqrt((Math.pow(x, 2.25) + Math.pow(x, 4)) / 2));\n    };\n\n    let percDomains = sqrtDomains.map((d) => {\n      return d / swatches;\n    });\n    let newDomains = percDomains.map((d) => {\n      return polynomial(d) * swatches;\n    });\n    domains = newDomains;\n  }\n\n  const sortedColor = colorKeys\n    // Convert to HSLuv and keep track of original indices\n    .map((c, i) => ({colorKeys: cArray(c), index: i}))\n    // Sort by lightness\n    .sort((c1, c2) => c2.colorKeys[0] - c1.colorKeys[0])\n    // Retrieve original RGB color\n    .map((data) => colorKeys[data.index]);\n\n  let ColorsArray = [];\n\n  let scale;\n  if (fullScale) {\n    const white = space === 'lch' ? chroma.lch(...chroma('#fff').lch()) : '#ffffff';\n    const black = space === 'lch' ? chroma.lch(...chroma('#000').lch()) : '#000000';\n    ColorsArray = [white, ...sortedColor, black];\n  } else {\n    if (sortColor) ColorsArray = sortedColor;\n    else ColorsArray = colorKeys;\n  }\n\n  let smoothScaleArray;\n  if (smooth) {\n    const stringColors = ColorsArray;\n    ColorsArray = ColorsArray.map((d) => chroma(String(d))[space]());\n    if (space === 'hcl') {\n      // special case for HCL if C is NaN we should treat it as 0\n      ColorsArray.forEach((c) => {\n        c[1] = Number.isNaN(c[1]) ? 0 : c[1];\n      });\n    }\n    if (space === 'jch') {\n      // JCh has some “random” hue for grey colors.\n      // Replacing it to NaN, so we can apply the same method of dealing with them.\n      for (let i = 0; i < stringColors.length; i++) {\n        const color = chroma(stringColors[i]).hcl();\n        if (Number.isNaN(color[0])) {\n          ColorsArray[i][2] = NaN;\n        }\n      }\n    }\n    scale = smoothScale(ColorsArray, domains, space);\n\n    smoothScaleArray = new Array(swatches).fill().map((_, d) => scale(d));\n  } else {\n    scale = chroma\n      .scale(\n        ColorsArray.map((color) => {\n          if (typeof color === 'object' && color.constructor === chroma.Color) {\n            return color;\n          }\n          return String(color);\n        })\n      )\n      .domain(domains)\n      .mode(space);\n  }\n  if (asFun) {\n    return scale;\n  }\n\n  // const Colors = new Array(swatches).fill().map((_, d) => chroma(scale(d)).hex());\n  const Colors = !smooth || smooth === false ? scale.colors(swatches) : smoothScaleArray;\n\n  const colors = Colors.filter((el) => el != null);\n\n  return colors;\n}\n\nfunction removeDuplicates(originalArray, prop) {\n  const newArray = [];\n  const lookupObject = {};\n  const keys1 = Object.keys(originalArray);\n\n  keys1.forEach((i) => {\n    lookupObject[originalArray[i][prop]] = originalArray[i];\n  });\n\n  const keys2 = Object.keys(lookupObject);\n  keys2.forEach((i) => newArray.push(lookupObject[i]));\n  return newArray;\n}\n\nfunction uniq(a) {\n  return Array.from(new Set(a));\n}\n\n// Helper function to change any NaN to a zero\nfunction filterNaN(x) {\n  if (Number.isNaN(x)) {\n    return 0;\n  }\n  return x;\n}\n\n// Helper function for rounding color values to whole numbers\nfunction convertColorValue(color, format, object = false) {\n  if (!color) {\n    throw new Error(`Cannot convert color value of “${color}”`);\n  }\n  if (!colorSpaces[format]) {\n    throw new Error(`Cannot convert to colorspace “${format}”`);\n  }\n  const space = colorSpaces[format];\n  const colorObj = chroma(String(color))[space]();\n  if (format === 'HSL') {\n    colorObj.pop();\n  }\n  if (format === 'HEX') {\n    if (object) {\n      const rgb = chroma(String(color)).rgb();\n      return {r: rgb[0], g: rgb[1], b: rgb[2]};\n    }\n    return colorObj;\n  }\n\n  const colorObject = {};\n  let newColorObj = colorObj.map(filterNaN);\n\n  newColorObj = newColorObj.map((ch, i) => {\n    let rnd = round(ch);\n    let j = i;\n    if (space === 'hsluv') {\n      j += 2;\n    }\n    let letter = space.charAt(j);\n    if (space === 'jch' && letter === 'c') {\n      letter = 'C';\n    }\n    colorObject[letter === 'j' ? 'J' : letter] = rnd;\n    if (space in {lab: 1, lch: 1, jab: 1, jch: 1}) {\n      if (!object) {\n        if (letter === 'l' || letter === 'j') {\n          rnd += '%';\n        }\n        if (letter === 'h') {\n          rnd += 'deg';\n        }\n      }\n    } else if (space !== 'hsluv') {\n      if (letter === 's' || letter === 'l' || letter === 'v') {\n        colorObject[letter] = round(ch, 2);\n        if (!object) {\n          rnd = round(ch * 100);\n          rnd += '%';\n        }\n      } else if (letter === 'h' && !object) {\n        rnd += 'deg';\n      }\n    }\n    return rnd;\n  });\n\n  const stringName = space;\n  const stringValue = `${stringName}(${newColorObj.join(', ')})`;\n\n  if (object) {\n    return colorObject;\n  }\n  return stringValue;\n}\n\nfunction luminance(r, g, b) {\n  const a = [r, g, b].map((v) => {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : ((v + 0.055) / 1.055) ** 2.4;\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\nfunction getContrast(color, base, baseV, method = 'wcag2') {\n  if (baseV === undefined) {\n    // If base is an array and baseV undefined\n    const baseLightness = chroma.rgb(...base).hsluv()[2];\n    baseV = round(baseLightness / 100, 2);\n  }\n\n  if (method === 'wcag2') {\n    const colorLum = luminance(color[0], color[1], color[2]);\n    const baseLum = luminance(base[0], base[1], base[2]);\n\n    const cr1 = (colorLum + 0.05) / (baseLum + 0.05); // will return value >=1 if color is darker than background\n    const cr2 = (baseLum + 0.05) / (colorLum + 0.05); // will return value >=1 if color is lighter than background\n\n    if (baseV < 0.5) {\n      // Dark themes\n      // If color is darker than background, return cr1 which will be whole number\n      if (cr1 >= 1) {\n        return cr1;\n      }\n      // If color is lighter than background, return cr2 as negative whole number\n      return -cr2;\n    }\n    // Light themes\n    // If color is lighter than background, return cr2 which will be whole number\n    if (cr1 < 1) {\n      return cr2;\n    }\n    // If color is darker than background, return cr1 as negative whole number\n    if (cr1 === 1) {\n      return cr1;\n    }\n    return -cr1;\n  } else if (method === 'wcag3') {\n    return baseV < 0.5 ? APCAcontrast(sRGBtoY(color), sRGBtoY(base)) * -1 : APCAcontrast(sRGBtoY(color), sRGBtoY(base));\n  } else {\n    throw new Error(`Contrast calculation method ${method} unsupported; use 'wcag2' or 'wcag3'`);\n  }\n}\n\nfunction minPositive(r, formula) {\n  if (!r) {\n    throw new Error('Array undefined');\n  }\n  if (!Array.isArray(r)) {\n    throw new Error('Passed object is not an array');\n  }\n  const min = formula === 'wcag2' ? 0 : 1;\n  return Math.min(...r.filter((val) => val >= min));\n}\n\nfunction ratioName(r, formula) {\n  if (!r) {\n    throw new Error('Ratios undefined');\n  }\n  r = r.sort((a, b) => a - b); // sort ratio array in case unordered\n\n  const min = minPositive(r, formula);\n  const minIndex = r.indexOf(min);\n  const nArr = []; // names array\n\n  const rNeg = r.slice(0, minIndex);\n  const rPos = r.slice(minIndex, r.length);\n\n  // Name the negative values\n  for (let i = 0; i < rNeg.length; i++) {\n    const d = 1 / (rNeg.length + 1);\n    const m = d * 100;\n    const nVal = m * (i + 1);\n    nArr.push(round(nVal));\n  }\n  // Name the positive values\n  for (let i = 0; i < rPos.length; i++) {\n    nArr.push((i + 1) * 100);\n  }\n  nArr.sort((a, b) => a - b); // just for safe measure\n\n  return nArr;\n}\n\nconst searchColors = (color, bgRgbArray, baseV, ratioValues, formula) => {\n  const colorLen = 3000;\n  const colorScale = createScale({\n    swatches: colorLen,\n    colorKeys: color._modifiedKeys,\n    colorspace: color._colorspace,\n    shift: 1,\n    smooth: color._smooth,\n    asFun: true\n  });\n  const ccache = {};\n  // let ccounter = 0;\n  const getContrast2 = (i) => {\n    if (ccache[i]) {\n      return ccache[i];\n    }\n    const rgb = chroma(colorScale(i)).rgb();\n    const c = getContrast(rgb, bgRgbArray, baseV, formula);\n    ccache[i] = c;\n    // ccounter++;\n    return c;\n  };\n  const colorSearch = (x) => {\n    const first = getContrast2(0);\n    const last = getContrast2(colorLen);\n    const dir = first < last ? 1 : -1;\n    const ε = 0.01;\n    x += 0.005 * Math.sign(x);\n    let step = colorLen / 2;\n    let dot = step;\n    let val = getContrast2(dot);\n    let counter = 100;\n    while (Math.abs(val - x) > ε && counter) {\n      counter--;\n      step /= 2;\n      if (val < x) {\n        dot += step * dir;\n      } else {\n        dot -= step * dir;\n      }\n      val = getContrast2(dot);\n    }\n    return round(dot, 3);\n  };\n  const outputColors = [];\n  ratioValues.forEach((ratio) => outputColors.push(colorScale(colorSearch(+ratio))));\n  return outputColors;\n};\n\nexport {cArray, hsluvArray, colorSpaces, convertColorValue, createScale, getContrast, luminance, minPositive, multiplyRatios, ratioName, removeDuplicates, round, searchColors, uniq};\n","///////////////////////////////////////////////////////////////////////////////\n/** @preserve\n/////    SAPC APCA - Advanced Perceptual Contrast Algorithm\n/////           Beta 0.1.9 W3 • contrast function only\n/////           DIST: W3 • Revision date: July 3, 2022\n/////    Function to parse color values and determine Lc contrast\n/////    Copyright © 2019-2022 by Andrew Somers. All Rights Reserved.\n/////    LICENSE: W3 LICENSE\n/////    CONTACT: Please use the ISSUES or DISCUSSIONS tab at:\n/////    https://github.com/Myndex/SAPC-APCA/\n/////\n///////////////////////////////////////////////////////////////////////////////\n/////\n/////    MINIMAL IMPORTS:\n/////      import { APCAcontrast, sRGBtoY, displayP3toY,\n/////               calcAPCA, fontLookupAPCA } from 'apca-w3';\n/////      import { colorParsley } from 'colorparsley';\n/////\n/////    FORWARD CONTRAST USAGE:\n/////      Lc = APCAcontrast( sRGBtoY( TEXTcolor ) , sRGBtoY( BACKGNDcolor ) );\n/////    Where the colors are sent as an rgba array [255,255,255,1]\n/////\n/////    Retrieving an array of font sizes for the contrast:\n/////      fontArray = fontLookupAPCA(Lc);\n/////\n/////    Live Demonstrator at https://www.myndex.com/APCA/\n// */\n///////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////                  SAPC Method and APCA Algorithm\n/////   W3 Licensed Version: https://github.com/Myndex/apca-w3\n/////   GITHUB MAIN REPO: https://github.com/Myndex/SAPC-APCA\n/////   DEVELOPER SITE: https://git.myndex.com/\n/////\n/////   Acknowledgments and Thanks To:\n/////   • This project references the research & work of M.Fairchild, R.W.Hunt,\n/////     Drs. Bailey/Lovie-Kitchin, G.Legge, A.Arditi, M.Stone, C.Poynton, \n/////     L.Arend, M.Luo, E.Burns, R.Blackwell, P.Barton, M.Brettel, and many \n/////     others — see refs at https://www.myndex.com/WEB/WCAG_CE17polarity\n/////   • Bruce Bailey of USAccessBoard for his encouragement, ideas, & feedback\n/////   • Chris Lilly of W3C for continued review, examination, & oversight\n/////   • Chris Loiselle of Oracle for getting us back on track in a pandemic\n/////   • The many volunteer test subjects for participating in the studies.\n/////   • The many early adopters, beta testers, and code/issue contributors\n/////   • Principal research conducted at Myndex by A.Somers.\n/////\n////////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////   *****  SAPC BLOCK  *****\n/////\n/////   For Evaluations, refer to this as: SAPC-8, 0.0.98G-series constant 4g\n/////            SAPC • S-LUV Advanced Predictive Color\n/////\n/////   SIMPLE VERSION — Only the basic APCA contrast predictor.\n/////\n/////   Included Extensions & Model Features in this file:\n/////       • SAPC-8 Core Contrast (Base APCA, non-clinical use only) \n/////       • G series constants, group \"G-4g\" using a 2.4 monitor exponent\n/////       • sRGB to Y, parses numeric sRGB color to luminance\n/////       • SoftToe black level soft clamp and flare compensation.\n/////\n/////\n////////////////////////////////////////////////////////////////////////////////\n/////\n/////               DISCLAIMER AND LIMITATIONS OF USE\n/////     APCA is an embodiment of certain suprathreshold contrast\n/////     prediction technologies and it is licensed to the W3 on a\n/////     limited basis for use in certain specific accessibility\n/////     guidelines for web content only. APCA may be used for \n/////     predicting colors for web content use without royalty.\n/////\n/////     However, Any such license excludes other use cases\n/////     not related to web content. Prohibited uses include\n/////     medical, clinical evaluation, human safety related,\n/////     aerospace, transportation, military applications, \n/////     and uses which are not specific to web based content\n/////     presented on self-illuminated displays or devices.\n/////\n////////////////////////////////////////////////////////////////////////////////\n\n//////////   APCA 0.1.9  G 4g USAGE  ///////////////////////////////////////////\n///\n///  The API for \"APCA 0.1.9\" is trivially simple.\n///  Send text and background sRGB numeric values to the sRGBtoY() function,\n///  and send the resulting text-Y and background-Y to the APCAcontrast function\n///  it returns a signed float with the numeric Lc contrast result.\n///  \n///  The two inputs are TEXT color and BACKGROUND color in that order.\n///  Each must be a numeric NOT a string, as this simple version has\n///  no string parsing utilities. EXAMPLE:\n///  ________________________________________________________________________\n///\n///     txtColor = colorParsley(0x123456); // color of the text\n///     bgColor  = colorParsley(0xabcdef); // color for the background\n///\n///     contrastLc = APCAcontrast( sRGBtoY(txtColor) , sRGBtoY(bgColor) );\n///  ________________________________________________________________________\n///\n///                  **********   QUICK START   **********\n///\n///  Each color must be a 24bit color (8 bit per channel) as a single integer\n///  (or 0x) sRGB encoded color, i.e. White is either the integer 16777216 or\n///  the hex 0xffffff. A float is returned with a positive or negative value.\n///  Negative values mean light text and a dark background, positive values\n///  mean dark text and a light background. 60.0, or -60.0 is a contrast\n///  \"sort of like\" the old WCAG 2's 4.5:1. NOTE: the total range is now less\n///  than ± 110, so output can be rounded to a signed INT but DO NOT output\n///  an absolute value - light text on dark BG should return a negative number.\n///\n///     *****  IMPORTANT: Do Not Mix Up Text and Background inputs.  *****\n///     ****************   APCA is polarity sensitive!   *****************\n///  \n////////////////////////////////////////////////////////////////////////////////\n\n\n////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n/////    BEGIN APCA  0.1.9  BLOCK       \\/////////////////////////////////////\n////                                     \\///////////////////////////////////\n///                                       \\/////////////////////////////////\n//                                         \\///////////////////////////////\n\n\n/////  DEPENDENCIES  /////\n\n// The following imports are not needed for the main APCA function,\n// but are needed for the shortcut/alias calcAPCA(), and for the\n// future invertAPCA function, which examines hue.\n\n       ////  (add slash to line start for local test mode, remove before push)\n/*    ////  LOCAL TESTING SWITCH for using test.html\n    import{colorParsley}from'../node_modules/colorparsley/src/colorparsley.js';\n/*/   //// TOGGLE\n    import { colorParsley } from 'colorparsley';\n// */ //// END LOCAL TESTING SWITCH\n\n\n/////  Module Scope Object Containing Constants  /////\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants\n\n/////  𝒦 SA98G  ///////////////////////////////////\n    const SA98G = {\n\n        mainTRC: 2.4, // 2.4 exponent for emulating actual monitor perception\n\n            // For reverseAPCA\n        get mainTRCencode() { return 1 / this.mainTRC },\n\n              // sRGB coefficients\n        sRco: 0.2126729, \n        sGco: 0.7151522, \n        sBco: 0.0721750, \n\n              // G-4g constants for use with 2.4 exponent\n        normBG: 0.56, \n        normTXT: 0.57,\n        revTXT: 0.62,\n        revBG: 0.65,\n\n              // G-4g Clamps and Scalers\n        blkThrs: 0.022,\n        blkClmp: 1.414, \n        scaleBoW: 1.14,\n        scaleWoB: 1.14,\n        loBoWoffset: 0.027,\n        loWoBoffset: 0.027,\n        deltaYmin: 0.0005,\n        loClip: 0.1,\n\n          ///// MAGIC NUMBERS for UNCLAMP, for use with 0.022 & 1.414 /////\n         // Magic Numbers for reverseAPCA\n        mFactor: 1.94685544331710,\n        get mFactInv() { return 1 / this.mFactor},\n        mOffsetIn: 0.03873938165714010,\n        mExpAdj: 0.2833433964208690,\n        get mExp() { return this.mExpAdj / this.blkClmp},\n        mOffsetOut: 0.3128657958707580,\n      }\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n//////////  APCA CALCULATION FUNCTIONS \\/////////////////////////////////////\n\n//////////  ƒ  APCAcontrast()  ////////////////////////////////////////////\nexport function APCAcontrast (txtY,bgY,places = -1) {\n                 // send linear Y (luminance) for text and background.\n                // txtY and bgY must be between 0.0-1.0\n               // IMPORTANT: Do not swap, polarity is important.\n\n  const icp = [0.0,1.1];     // input range clamp / input error check\n\n  if(isNaN(txtY)||isNaN(bgY)||Math.min(txtY,bgY)<icp[0]||\n                              Math.max(txtY,bgY)>icp[1]){\n    return 0.0;  // return zero on error\n    // return 'error'; // optional string return for error\n  };\n\n//////////   SAPC LOCAL VARS   /////////////////////////////////////////\n\n  let SAPC = 0.0;            // For raw SAPC values\n  let outputContrast = 0.0; // For weighted final values\n  let polCat = 'BoW';      // Alternate Polarity Indicator. N normal R reverse\n\n  // TUTORIAL\n\n  // Use Y for text and BG, and soft clamp black,\n  // return 0 for very close luminances, determine\n  // polarity, and calculate SAPC raw contrast\n  // Then scale for easy to remember levels.\n\n  // Note that reverse contrast (white text on black)\n  // intentionally returns a negative number\n  // Proper polarity is important!\n\n//////////   BLACK SOFT CLAMP   ////////////////////////////////////////\n\n          // Soft clamps Y for either color if it is near black.\n  txtY = (txtY > SA98G.blkThrs) ? txtY :\n                         txtY + Math.pow(SA98G.blkThrs - txtY, SA98G.blkClmp);\n  bgY = (bgY > SA98G.blkThrs) ? bgY :\n                          bgY + Math.pow(SA98G.blkThrs - bgY, SA98G.blkClmp);\n\n       ///// Return 0 Early for extremely low ∆Y\n  if ( Math.abs(bgY - txtY) < SA98G.deltaYmin ) { return 0.0; }\n\n\n//////////   APCA/SAPC CONTRAST - LOW CLIP (W3 LICENSE)  ///////////////\n\n  if ( bgY > txtY ) {  // For normal polarity, black text on white (BoW)\n\n              // Calculate the SAPC contrast value and scale\n    SAPC = ( Math.pow(bgY, SA98G.normBG) - \n             Math.pow(txtY, SA98G.normTXT) ) * SA98G.scaleBoW;\n\n            // Low Contrast smooth rollout to prevent polarity reversal\n           // and also a low-clip for very low contrasts\n    outputContrast = (SAPC < SA98G.loClip) ? 0.0 : SAPC - SA98G.loBoWoffset;\n\n  } else {  // For reverse polarity, light text on dark (WoB)\n           // WoB should always return negative value.\n    polCat = 'WoB';\n\n    SAPC = ( Math.pow(bgY, SA98G.revBG) - \n             Math.pow(txtY, SA98G.revTXT) ) * SA98G.scaleWoB;\n\n    outputContrast = (SAPC > -SA98G.loClip) ? 0.0 : SAPC + SA98G.loWoBoffset;\n  }\n\n         // return Lc (lightness contrast) as a signed numeric value \n        // Round to the nearest whole number as string is optional.\n       // Rounded can be a signed INT as output will be within ± 127 \n      // places = -1 returns signed float, 1 or more set that many places\n     // 0 returns rounded string, uses BoW or WoB instead of minus sign\n\n  if(places < 0 ){  // Default (-1) number out, all others are strings\n    return  outputContrast * 100.0;\n  } else if(places == 0 ){\n    return  Math.round(Math.abs(outputContrast)*100.0)+'<sub>'+polCat+'</sub>';\n  } else if(Number.isInteger(places)){\n    return  (outputContrast * 100.0).toFixed(places);\n  } else { return 0.0 }\n\n} // End APCAcontrast()\n\n\n\n\n/*  SWITCH -- WORK IN PROGRESS DO NOT USE\n//////////  ƒ  invertAPCA()  //////////////////////////////////////////////////\nexport function invertAPCA (\n      {knownColor: [128,128,128], knownType: 'bg', targetCnst: 75,\n       returnAs: 'object', unknownType: 'txt', hueInvert: false,\n       hueRange: 5, preserveSat: false }) {\n\n  //if (Math.abs(targetCnst) < 15) { return false }; // abs contrast must be > 15\n\n  let knownY = sRGBtoY (knownColor);\n  let unknownY = knownY, knownExp, unknownExp;\n  let min,max,knownLs,isBG = true;\n\n\n  if (knownType == 'bg' || knownType == 'background') {\n    knownLs = Math.pow(knownY, );\n    black = APCAcontrast(0,knownY);\n    white = APCAcontrast(1,knownY);\n  } else if  (knownType == 'txt' || knownType == 'text') {\n    isBG = false;\n    black = APCAcontrast(knownY,0);\n    white = APCAcontrast(knownY,1);\n  } else { return false } // return false on error\n\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\n  const scale = contrast > 0 ? SA98G.scaleBoW : SA98G.scaleWoB;\n  const offset = contrast > 0 ? SA98G.loBoWoffset : -SA98G.loWoBoffset;\n\n\n    targetCnst = ( parseFloat(targetCnst) * 0.01 + offset ) / scale;\n\n              // Soft clamps Y if it is near black.\n    knownY = (knownY > SA98G.blkThrs) ? knownY :\n              knownY + Math.pow(SA98G.blkThrs - knownY, SA98G.blkClmp);\n                                  \n       // set the known and unknown exponents\n    if (isBG) {\n        knownExp = targetCnst > 0 ? SA98G.normBG : SA98G.revBG;\n        unknownExp = targetCnst > 0 ? SA98G.normTXT : SA98G.revTXT;\n        unknownY = Math.pow( Math.pow(knownY,knownExp) - targetCnst, 1/unknownExp );\n        if (isNaN(unknownY)) return false;\n    } else if (!isBG) {\n        knownExp = targetCnst > 0 ? SA98G.normTXT : SA98G.revTXT;\n        unknownExp = targetCnst > 0 ? SA98G.normBG : SA98G.revBG;\n        unknownY = Math.pow(targetCnst + Math.pow(knownY,knownExp), 1/unknownExp );\n        if (isNaN(unknownY)) return false;\n    }\n\n    //return contrast +'----'+unknownY;\n\n    if (unknownY > 1.06 || unknownY < 0) { return false } // return false on overflow\n    // if (unknownY < 0) { return false } // return false on underflow\n    //unknownY = Math.max(unknownY,0.0);\n    \n                //  unclamp\n    unknownY = (unknownY > SA98G.blkThrs) ? unknownY : \n    (Math.pow(((unknownY + SA98G.mOffsetIn)m* SA98G.mFactor),\n                           SA98G.mExp) * SA98G.mFactInv) - SA98G.mOffsetOut;\n    \n//    unknownY - 0.22 * Math.pow(unknownY*0.5, 1/blkClmp);\n\n    unknownY = Math.max(Math.min(unknownY,1.0),0.0);\n\n    let testedCnst = (isBG) ? APCAcontrast(unknownY,knownY) : \n                              APCAcontrast(knownY,unknownY);\n\n  if (returnAs === 'object') {\n    let hexB = ( Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255)\n                ).toString(16).padStart(2,'0');\n    hexB = '#' + hexB + hexB + hexB;\n    return  {color: hexB, Lc: testedCnst, whiteLc: white, blackLc: black};\n  } else if (returnAs === 'hex') {\n    let hexB = ( Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255)\n                ).toString(16).padStart(2,'0');\n    return  '#' + hexB + hexB + hexB;\n  } else if (returnAs === 'array') {\n    let colorB = Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255);\n    let retUse = (knownType == 'bg') ? 'txtColor' : 'bgColor'\n    return  [colorB,colorB,colorB,1,retUse];\n  } else if (returnAs === 'Y' || returnAs === 'y') {\n    return  Math.max(0.0,unknownY);\n  } else { return false } // return knownY on error\n}\n//  */  // END SWITCH\n\n\n\n\n//////////  ƒ  reverseAPCA() DEPRECATED SOON ///////////////////////////////\nexport function reverseAPCA (contrast = 0,knownY = 1.0,\n                             knownType = 'bg',returnAs = 'hex') {\n    \n  if (Math.abs(contrast) < 9) { return false }; // abs contrast must be > 9\n  \n  let unknownY = knownY, knownExp, unknownExp;\n  \n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\n  const scale = contrast > 0 ? SA98G.scaleBoW : SA98G.scaleWoB;\n  const offset = contrast > 0 ? SA98G.loBoWoffset : -SA98G.loWoBoffset;\n\n\n  contrast = ( parseFloat(contrast) * 0.01 + offset ) / scale;\n\n            // Soft clamps Y if it is near black.\n  knownY = (knownY > SA98G.blkThrs) ? knownY :\n            knownY + Math.pow(SA98G.blkThrs - knownY, SA98G.blkClmp);\n                                \n     // set the known and unknown exponents\n  if (knownType == 'bg' || knownType == 'background') {\n      knownExp = contrast > 0 ? SA98G.normBG : SA98G.revBG;\n      unknownExp = contrast > 0 ? SA98G.normTXT : SA98G.revTXT;\n      unknownY = Math.pow( Math.pow(knownY,knownExp) - contrast, 1/unknownExp );\n      if (isNaN(unknownY)) return false;\n  } else if (knownType == 'txt' || knownType == 'text') {\n      knownExp = contrast > 0 ? SA98G.normTXT : SA98G.revTXT;\n      unknownExp = contrast > 0 ? SA98G.normBG : SA98G.revBG;\n      unknownY = Math.pow(contrast + Math.pow(knownY,knownExp), 1/unknownExp );\n      if (isNaN(unknownY)) return false;\n  } else { return false } // return false on error\n\n  //return contrast +'----'+unknownY;\n\n  if (unknownY > 1.06 || unknownY < 0) { return false } // return false on overflow\n  // if (unknownY < 0) { return false } // return false on underflow\n  //unknownY = Math.max(unknownY,0.0);\n  \n              //  unclamp\n  unknownY = (unknownY > SA98G.blkThrs) ? unknownY : \n  (Math.pow(((unknownY + SA98G.mOffsetIn) * SA98G.mFactor),\n                         SA98G.mExp) * SA98G.mFactInv) - SA98G.mOffsetOut;\n  \n//    unknownY - 0.22 * Math.pow(unknownY*0.5, 1/blkClmp);\n\n  unknownY = Math.max(Math.min(unknownY,1.0),0.0);\n\n  if (returnAs === 'hex') {\n    let hexB = ( Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255)\n                ).toString(16).padStart(2,'0');\n\n    return  '#' + hexB + hexB + hexB;\n  } else if (returnAs === 'color') {\n    let colorB = Math.round(Math.pow(unknownY,SA98G.mainTRCencode) * 255);\n    let retUse = (knownType == 'bg') ? 'txtColor' : 'bgColor'\n    return  [colorB,colorB,colorB,1,retUse];\n  } else if (returnAs === 'Y' || returnAs === 'y') {\n    return  Math.max(0.0,unknownY);\n  } else { return false } // return knownY on error\n}\n\n\n\n\n//////////  ƒ  calcAPCA()  /////////////////////////////////////////////\nexport function calcAPCA (textColor, bgColor, places = -1, round = true) {\n\n        // Note that this function requires colorParsley !!\n\tlet bgClr = colorParsley(bgColor);\n\tlet txClr = colorParsley(textColor);\n\tlet hasAlpha = (txClr[3] == '' || txClr[3] == 1) ? false : true ;\n\n\tif (hasAlpha) { txClr = alphaBlend( txClr, bgClr, round); };\n\n\treturn APCAcontrast( sRGBtoY(txClr), sRGBtoY(bgClr), places)\n} // End calcAPCA()\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n//////////  ƒ  fontLookupAPCA()  0.1.7 (G)  \\////////////////////////////////\n/////////                                    \\//////////////////////////////\n\nexport function fontLookupAPCA (contrast,places=2) {\n\n////////////////////////////////////////////////////////////////////////////\n/////  CONTRAST * FONT WEIGHT & SIZE  /////////////////////////////////////\n\n// Font size interpolations. Here the chart was re-ordered to put\n// the main contrast levels each on one line, instead of font size per line.\n// First column is LC value, then each following column is font size by weight\n\n// G G G G G G  Public Beta 0.1.7 (G) • MAY 28 2022\n\n// Lc values under 70 should have Lc 15 ADDED if used for body text\n// All font sizes are in px and reference font is Barlow\n\n// 999: prohibited - too low contrast\n// 777: NON TEXT at this minimum weight stroke\n// 666 - this is for spot text, not fluent-Things like copyright or placeholder.\n// 5xx - minimum font at this weight for content, 5xx % 500 for font-size\n// 4xx - minimum font at this weight for any purpose], 4xx % 400 for font-size\n\n// MAIN FONT SIZE LOOKUP\n\n//// ASCENDING SORTED  Public Beta 0.1.7 (G) • MAY 28 2022  ////\n\n//// Lc 45 * 0.2 = 9 which is the index for the row for Lc 45\n\n// MAIN FONT LOOKUP May 28 2022 EXPANDED\n// Sorted by Lc Value\n// First row is standard weights 100-900\n// First column is font size in px\n// All other values are the Lc contrast \n// 999 = too low. 777 = non-text and spot text only\n\n\nconst fontMatrixAscend = [\n    ['Lc',100,200,300,400,500,600,700,800,900],\n    [0,999,999,999,999,999,999,999,999,999],\n    [10,999,999,999,999,999,999,999,999,999],\n    [15,777,777,777,777,777,777,777,777,777],\n    [20,777,777,777,777,777,777,777,777,777],\n    [25,777,777,777,120,120,108,96,96,96],\n    [30,777,777,120,108,108,96,72,72,72],\n    [35,777,120,108,96,72,60,48,48,48],\n    [40,120,108,96,60,48,42,32,32,32],\n    [45,108,96,72,42,32,28,24,24,24],\n    [50,96,72,60,32,28,24,21,21,21],\n    [55,80,60,48,28,24,21,18,18,18],\n    [60,72,48,42,24,21,18,16,16,18],\n    [65,68,46,32,21.75,19,17,15,16,18],\n    [70,64,44,28,19.5,18,16,14.5,16,18],\n    [75,60,42,24,18,16,15,14,16,18],\n    [80,56,38.25,23,17.25,15.81,14.81,14,16,18],\n    [85,52,34.5,22,16.5,15.625,14.625,14,16,18],\n    [90,48,32,21,16,15.5,14.5,14,16,18],\n    [95,45,28,19.5,15.5,15,14,13.5,16,18],\n    [100,42,26.5,18.5,15,14.5,13.5,13,16,18],\n    [105,39,25,18,14.5,14,13,12,16,18],\n    [110,36,24,18,14,13,12,11,16,18],\n    [115,34.5,22.5,17.25,12.5,11.875,11.25,10.625,14.5,16.5],\n    [120,33,21,16.5,11,10.75,10.5,10.25,13,15],\n    [125,32,20,16,10,10,10,10,12,14],\n    ];\n\n\n// ASCENDING SORTED  Public Beta 0.1.7 (G) • MAY 28 2022 ////\n\n// DELTA - MAIN FONT LOOKUP May 28 2022 EXPANDED\n// EXPANDED  Sorted by Lc Value ••  DELTA\n// The pre-calculated deltas of the above array\n\nconst fontDeltaAscend = [\n    ['∆Lc',100,200,300,400,500,600,700,800,900],\n    [0,0,0,0,0,0,0,0,0,0],\n    [10,0,0,0,0,0,0,0,0,0],\n    [15,0,0,0,0,0,0,0,0,0],\n    [20,0,0,0,0,0,0,0,0,0],\n    [25,0,0,0,12,12,12,24,24,24],\n    [30,0,0,12,12,36,36,24,24,24],\n    [35,0,12,12,36,24,18,16,16,16],\n    [40,12,12,24,18,16,14,8,8,8],\n    [45,12,24,12,10,4,4,3,3,3],\n    [50,16,12,12,4,4,3,3,3,3],\n    [55,8,12,6,4,3,3,2,2,0],\n    [60,4,2,10,2.25,2,1,1,0,0],\n    [65,4,2,4,2.25,1,1,0.5,0,0],\n    [70,4,2,4,1.5,2,1,0.5,0,0],\n    [75,4,3.75,1,0.75,0.188,0.188,0,0,0],\n    [80,4,3.75,1,0.75,0.188,0.188,0,0,0],\n    [85,4,2.5,1,0.5,0.125,0.125,0,0,0],\n    [90,3,4,1.5,0.5,0.5,0.5,0.5,0,0],\n    [95,3,1.5,1,0.5,0.5,0.5,0.5,0,0],\n    [100,3,1.5,0.5,0.5,0.5,0.5,1,0,0],\n    [105,3,1,0,0.5,1,1,1,0,0],\n    [110,1.5,1.5,0.75,1.5,1.125,0.75,0.375,1.5,1.5],\n    [115,1.5,1.5,0.75,1.5,1.125,0.75,0.375,1.5,1.5],\n    [120,1,1,0.5,1,0.75,0.5,0.25,1,1],\n    [125,0,0,0,0,0,0,0,0,0],\n    ];\n\n  // APCA CONTRAST FONT LOOKUP TABLES\n  // Copyright © 2022 by Myndex Research and Andrew Somers. All Rights Reserved\n  // Public Beta 0.1.7 (G) • MAY 28 2022\n  // For the following arrays, the Y axis is contrastArrayLen\n  // The two x axis are weightArrayLen and scoreArrayLen\n\n  // MAY 28 2022\n\n  const weightArray = [0,100,200,300,400,500,600,700,800,900];\n  const weightArrayLen = weightArray.length; // X axis\n\n  let returnArray = [contrast.toFixed(places),0,0,0,0,0,0,0,0,0,];\n  const returnArrayLen = returnArray.length; // X axis\n\n\n  const contrastArrayAscend = ['lc',0,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,];\n  const contrastArrayLenAsc = contrastArrayAscend.length; // Y azis\n\n//// Lc 45 * 0.2 = 9, and 9 is the index for the row for Lc 45\n\n  let tempFont = 777;\n  contrast = Math.abs(contrast); // Polarity unneeded for LUT\n  const factor = 0.2; // 1/5 as LUT is in increments of 5\n  const index = (contrast == 0) ?\n                 1 : (contrast * factor) | 0 ; // LUT row... n|0 is bw floor\n  let w = 0; \n    // scoreAdj interpolates the needed font side per the Lc\n  let scoreAdj = (contrast - fontMatrixAscend[index][w]) * factor;\n\n  w++; // determines column in font matrix LUT\n\n\n/////////  Font and Score Interpolation  \\/////////////////////////////////\n\n// populate returnArray with interpolated values\n\n  for (; w < weightArrayLen; w++) {\n\n    tempFont = fontMatrixAscend[index][w]; \n\n    if (tempFont > 400) { // declares a specific minimum for the weight.\n        returnArray[w] = tempFont;\n    } else if (contrast < 14.5 ) {\n        returnArray[w] = 999; //  999 = do not use for anything\n    } else if (contrast < 29.5 ) {\n        returnArray[w] = 777; // 777 =  non-text only\n    } else {\n                // INTERPOLATION OF FONT SIZE\n               // sets level for 0.5px size increments of smaller fonts\n              // Note bitwise (n|0) instead of floor\n      (tempFont > 24) ?\n        returnArray[w] =\n            Math.round(tempFont - (fontDeltaAscend[index][w] * scoreAdj)) :\n        returnArray[w] =\n            tempFont - ((2.0 * fontDeltaAscend[index][w] * scoreAdj) | 0) * 0.5;\n                                                      // (n|0) is bitwise floor\n    }\n  }\n/////////  End Interpolation  ////////////////////////////////////////////\n\n  return returnArray\n} // end fontLookupAPCA\n\n/////////\\                                      ///////////////////////////\\\n//////////\\  END  fontLookupAPCA()  0.1.7 (G)  /////////////////////////////\\\n/////////////////////////////////////////////////////////////////////////////\\\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////\n//////////  LUMINANCE CONVERTERS  |//////////////////////////////////////////\n\n\n//////////  ƒ  sRGBtoY()  //////////////////////////////////////////////////\nexport function sRGBtoY (rgb = [0,0,0]) { // send sRGB 8bpc (0xFFFFFF) or string\n\n// NOTE: Currently expects 0-255\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n/*\nconst mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\n    \nconst sRco = 0.2126729, \n      sGco = 0.7151522, \n      sBco = 0.0721750; // sRGB coefficients\n      */\n// Future:\n// 0.2126478133913640\t0.7151791475336150\t0.0721730390750208\n// Derived from:\n// xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\n// 0.312720\t0.329030\t6504\t0.640\t0.330\t0.300\t0.600\t0.150\t0.060\n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan/255.0, SA98G.mainTRC); };\n\n  return SA98G.sRco * simpleExp(rgb[0]) +\n         SA98G.sGco * simpleExp(rgb[1]) +\n         SA98G.sBco * simpleExp(rgb[2]);\n         \n} // End sRGBtoY()\n\n\n\n\n//////////  ƒ  displayP3toY()  /////////////////////////////////////////////\nexport function displayP3toY (rgb = [0,0,0]) { // send rgba array\n\n// NOTE: Currently Apple has the tuple as 0.0 to 1.0, NOT 255\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\nconst mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\n                    // Pending evaluation, because, Apple...\n    \nconst sRco = 0.2289829594805780, \n      sGco = 0.6917492625852380, \n      sBco = 0.0792677779341829; // displayP3 coefficients\n\n// Derived from:\n// xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\n// 0.312720\t0.329030\t6504\t0.680\t0.320\t0.265\t0.690\t0.150\t0.060\n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan, mainTRC); };\n\n  return sRco * simpleExp(rgb[0]) +\n         sGco * simpleExp(rgb[1]) +\n         sBco * simpleExp(rgb[2]);\n\n} // End displayP3toY()\n\n\n\n\n//////////  ƒ  adobeRGBtoY()  /////////////////////////////////////////////\nexport function adobeRGBtoY (rgb = [0,0,0]) { // send rgba array\n\n// NOTE: Currently expects 0-255\n\n/////   APCA   0.0.98G - 4g - W3 Compatible Constants   ////////////////////\n\nconst mainTRC = 2.35; // 2.35 exponent emulates actual monitor perception\n                     // Pending evaluation...\n    \nconst sRco = 0.2973550227113810, \n      sGco = 0.6273727497145280, \n      sBco = 0.0752722275740913; // adobeRGB coefficients\n\n// Derived from:\n// xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\n// 0.312720\t0.329030\t6504\t0.640\t0.330\t0.210\t0.710\t0.150\t0.060\n\n         // linearize r, g, or b then apply coefficients\n        // and sum then return the resulting luminance\n\n  function simpleExp (chan) { return Math.pow(chan/255.0, mainTRC); };\n\n  return sRco * simpleExp(rgb[0]) +\n         sGco * simpleExp(rgb[1]) +\n         sBco * simpleExp(rgb[2]);\n\n} // End displayP3toY()\n\n\n\n\n////////////////////////////////////////////////////////////////////////////\n//////////  UTILITIES  \\///////////////////////////////////////////////////\n\n\n//////////  ƒ  alphaBlend()  /////////////////////////////////////////////\n\n                      // send rgba array for text/icon, rgb for background.\n                     // Only foreground allows alpha of 0.0 to 1.0 \n                    // This blends using gamma encoded space (standard)\n                   // rounded 0-255 or set round=false for number 0.0-255.0\nexport function alphaBlend (rgbaFG=[0,0,0,1.0], rgbBG=[0,0,0], round = true ) {\n\t\n\trgbaFG[3] = Math.max(Math.min(rgbaFG[3], 1.0), 0.0); // clamp alpha 0-1\n\tlet compBlend = 1.0 - rgbaFG[3];\n\tlet rgbOut = [0,0,0,1,true]; // or just use rgbBG to retain other elements?\n\t\n\tfor (let i=0;i<3;i++) {\n\t\trgbOut[i] = rgbBG[i] * compBlend + rgbaFG[i] * rgbaFG[3];\n\t\tif (round) rgbOut[i] = Math.min(Math.round(rgbOut[i]),255);\n\t};\n  return rgbOut;\n} // End alphaBlend()\n\n\n\n\n//\\                                     ////////////////////////////////////////\n///\\                                   ////////////////////////////////////////\n////\\                                 ////////////////////////////////////////\n/////\\  END APCA 0.1.9  G-4g  BLOCK  ////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n","///////////////////////////////////////////////////////////////////////////////\n/** @preserve\n/////    CoLoR PaRsLeY  a simple set of color parsing thingies!\n/////           Beta 0.1.8   Revision date: June 04, 2022\n/////\n/////    Functions to parse color values and return array\n/////    Copyright (c) 2019-2022 by Andrew Somers. All Rights Reserved.\n/////    LICENSE: AGPL 3\n/////    CONTACT: Please use the ISSUES or DISCUSSIONS tab at:\n/////    https://github.com/Myndex/colorparsley/\n/////\n///////////////////////////////////////////////////////////////////////////////\n/////\n/////    IMPORT:\n/////    import { colorParsley } from 'colorparsley';\n/////\n/////    let rgbaArray = colorParsley('#abcdef');\n/////\n/////    Output as array:  [r,g,b,a,isValid,colorspace]\n/////    Example: [123,123,123,1.0,true,'sRGB']\n// */\n///////////////////////////////////////////////////////////////////////////////\n\n// ==ClosureCompiler==\n// @compilation_level SIMPLE_OPTIMIZATIONS\n// @output_file_name colorparsley.min.js\n// @code_url https://raw.githubusercontent.com/Myndex/colorparsley/master/src/colorparsley.js\n// ==/ClosureCompiler==\n\n// \n////////////////////////////////////////////////////////////////////////////////\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////  BEGIN COLOR PARSLEY 0.1.8  BLOCK  \\/////////////////////////////////////\n////                                      \\///////////////////////////////////\n///                                        \\/////////////////////////////////\n\n\n/////  ƒ  colorParsley()  ///////////////////////////////////////////////////\n\nexport function colorParsley (colorIn) {\n\n    if (typeof colorIn === 'string') {\n        return parseString(colorIn);\n    } else if (typeof colorIn === 'number') {\n        return [(colorIn & 0xFF0000) >> 16,\n                (colorIn & 0x00FF00) >> 8,\n                (colorIn & 0x0000FF), 1, true, 'unknown'];\n    } else if (typeof colorIn === 'object') {\n       if (Array.isArray(colorIn)) {\n          return colorIn;\n       } else if (!isNaN(colorIn.r) || !isNaN(colorIn.red)){\n              // validate object & return array\n         let objArray = [0,0,0,0,false,'unknown'];\n             // takes object with r g b or red green blue etc...\n         objArray[0] = (colorIn.r)?colorIn.r:(colorIn.red)?\n                        colorIn.red:false;\n         objArray[1] = (colorIn.g)?colorIn.g:(colorIn.green)?\n                        colorIn.green:false;\n         objArray[2] = (colorIn.b)?colorIn.b:(colorIn.blue)?\n                        colorIn.blue:false;\n         objArray[3] = (colorIn.a)?colorIn.a:(colorIn.alpha)?\n                        colorIn.alpha:1;\n         objArray[4] = (objArray[0]&&objArray[1]&&objArray[2]) ? true : false;\n         objArray[5] =\n            (colorIn.space)?colorIn.space:\n            (colorIn.colorSpace)?colorIn.colorSpace:\n            (colorIn.colorspace)?colorIn.colorspace:\n            'unknown';\n         \n         return objArray;\n       }\n    }; // End if statement\n        console.log('colorParsley error: invalid input')\n        return [0,0,0,0,false,'inputError'] // throw 'InvalidInput' // return error \n};\n\n\n/////  ƒ  parseString()  ///////////////////////////////////////////////////\n\n// private\nfunction parseString (colorString = '#abcdef') {\n\n                 // strip junk and make a clean string (replace unmatched)\n                // This retains all alphanumeric and , . # % ( ) /\n  colorString = colorString.replace(/[^\\w,.#%()\\/ -]/g,'');\n  colorString = colorString.toLowerCase();   // set lowercase\n  \n  let isValid = false; // validation flag, in array element [4]\n  let type = 'sRGB'; // Default colorspace flag in element [5]\n  let retArray = [0,0,0,0,isValid,type]; // init the return array\n\n\n      // test for named color before iterating array\n  if (colorString.match(/^(?:(?!rgb|l.h|hs|col|\\d|#).{0,4})(?=[g-z])/)) {\n\n\n    ///// CSS4 NAMED COLORS plus a bonus set of GREYS and GRAYS //////////\n    \n        // If name is matched, parse and return the color values\n    let namedColors = {\n    gray0:'000000',gray1:'111111',gray2:'222222',gray3:'333333',gray4:'444444',gray5:'555555',gray6:'666666',gray7:'777777',gray8:'888888',gray9:'999999',graya:'aaaaaa',grayb:'bbbbbb',grayc:'cccccc',grayd:'dddddd',graye:'eeeeee',grayf:'ffffff',midgray:'a0a0a0',\n    grey0:'000000',grey1:'111111',grey2:'222222',grey3:'333333',grey4:'444444',grey5:'555555',grey6:'666666',grey7:'777777',grey8:'888888',grey9:'999999',greya:'aaaaaa',greyb:'bbbbbb',greyc:'cccccc',greyd:'dddddd',greye:'eeeeee',greyf:'ffffff',midgrey:'a0a0a0',\n    aliceblue:'f0f8ff',antiquewhite:'faebd7',aqua:'00ffff',aquamarine:'7fffd4',azure:'f0ffff',\n    beige:'f5f5dc',bisque:'ffe4c4',black:'000000',blanchedalmond:'ffebcd',blue:'0000ff',blueviolet:'8a2be2',brown:'a52a2a',burlywood:'deb887',\n    cadetblue:'5f9ea0',chartreuse:'7fff00',chocolate:'d2691e',coral:'ff7f50',cornflowerblue:'6495ed',cornsilk:'fff8dc',crimson:'dc143c',cyan:'00ffff',\n    darkblue:'00008b',darkcyan:'008b8b',darkgoldenrod:'b8860b',darkgray:'a9a9a9',darkgreen:'006400',darkgrey:'a9a9a9',darkkhaki:'bdb76b',darkmagenta:'8b008b',darkolivegreen:'556b2f',darkorange:'ff8c00',darkorchid:'9932cc',darkred:'8b0000',darksalmon:'e9967a',darkseagreen:'8fbc8f',darkslateblue:'483d8b',darkslategray:'2f4f4f',darkslategrey:'2f4f4f',darkturquoise:'00ced1',darkviolet:'9400d3',deeppink:'ff1493',deepskyblue:'00bfff',dimgray:'696969',dimgrey:'696969',dodgerblue:'1e90ff',\n    firebrick:'b22222',floralwhite:'fffaf0',forestgreen:'228b22',fuchsia:'ff00ff',\n    gainsboro:'dcdcdc',ghostwhite:'f8f8ff',gold:'ffd700',goldenrod:'daa520',gray:'808080',green:'008000',greenyellow:'adff2f',grey:'808080',\n    honeydew:'f0fff0',hotpink:'ff69b4',\n    indianred:'cd5c5c',indigo:'4b0082',ivory:'fffff0',\n    khaki:'f0e68c',\n    lavender:'e6e6fa',lavenderblush:'fff0f5',lawngreen:'7cfc00',lemonchiffon:'fffacd',lightblue:'add8e6',lightcoral:'f08080',lightcyan:'e0ffff',lightgoldenrodyellow:'fafad2',lightgray:'d3d3d3',lightgreen:'90ee90',lightgrey:'d3d3d3',lightpink:'ffb6c1',lightsalmon:'ffa07a',lightseagreen:'20b2aa',lightskyblue:'87cefa',lightslategray:'778899',lightslategrey:'778899',lightsteelblue:'b0c4de',lightyellow:'ffffe0',lime:'00ff00',limegreen:'32cd32',linen:'faf0e6',\n    magenta:'ff00ff',maroon:'800000',mediumaquamarine:'66cdaa',mediumblue:'0000cd',mediumorchid:'ba55d3',mediumpurple:'9370db',mediumseagreen:'3cb371',mediumslateblue:'7b68ee',mediumspringgreen:'00fa9a',mediumturquoise:'48d1cc',mediumvioletred:'c71585',midnightblue:'191970',mintcream:'f5fffa',mistyrose:'ffe4e1',moccasin:'ffe4b5',\n    navajowhite:'ffdead',navy:'000080',\n    oldlace:'fdf5e6',olive:'808000',olivedrab:'6b8e23',orange:'ffa500',orangered:'ff4500',orchid:'da70d6',\n    palegoldenrod:'eee8aa',palegreen:'98fb98',paleturquoise:'afeeee',palevioletred:'db7093',papayawhip:'ffefd5',peachpuff:'ffdab9',peru:'cd853f',pink:'ffc0cb',plum:'dda0dd',powderblue:'b0e0e6',purple:'800080',\n    rebeccapurple:'663399',red:'ff0000',rosybrown:'bc8f8f',royalblue:'4169e1',\n    saddlebrown:'8b4513',salmon:'fa8072',sandybrown:'f4a460',seagreen:'2e8b57',seashell:'fff5ee',sienna:'a0522d',silver:'c0c0c0',skyblue:'87ceeb',slateblue:'6a5acd',slategray:'708090',slategrey:'708090',snow:'fffafa',springgreen:'00ff7f',steelblue:'4682b4',\n    tan:'d2b48c',teal:'008080',thistle:'d8bfd8',tomato:'ff6347',turquoise:'40e0d0',\n    violet:'ee82ee',\n    wheat:'f5deb3',white:'ffffff',whitesmoke:'f5f5f5',\n    yellow:'ffff00',yellowgreen:'9acd32'\n    };\n\n    for (let key in namedColors) {\n      if (colorString == key) {\n\n        let hexRex = {  \n          rex: /^([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/,\n          sprig: function (slices) {\n            for (let i = 0; i < 3; i++) {\n              retArray[i] = parseInt(slices[i+1],16);\n            }\n            retArray[3] = 1;\n            return true;\n          }\n        };\n\n        let hexProc = hexRex.rex.exec(namedColors[key]);\n        retArray[4] = isValid = hexRex.sprig(hexProc);\n\n        return retArray;\n      }\n    }\n  };   // end of named colors section\n\n\n       // NEW regex  0.1.6 - still current for use with with 0.1.8+\n      // See docs for breakdown of regex pattern\n  let colorRex = {\n    rex: /(?:^(?:#|0x|)(?:(?:([\\da-f])([\\da-f])([\\da-f])([\\da-f])?)(?!\\S)|(?:([\\da-f]{2})(?:([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})?)?))|(?:(?:^(?:rgba?|)\\(? ?(?:(?:(?:(255|(?:25[0-4]|2[0-4]\\d|1?\\d{1,2})(?:\\.\\d{1,24})?)))(?:,[^\\S]*$|(?:(?:, ?| )(255|(?:25[0-4]|2[0-4]\\d|1?\\d{1,2})(?:\\.\\d{1,24})?)(?:, ?| )(255|(?:25[0-4]|2[0-4]\\d|1?\\d{1,2})(?:\\.\\d{1,24})?)))|(100%|\\d{1,2}(?:\\.\\d{1,24})?%)(?:,?[^\\S]*$|(?:(?:, ?| )(?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%)(?:, ?| )(100%|\\d{1,2}(?:\\.\\d{1,24})?%)))))|^(?:color\\((srgb|srgb-linear|display-p3|a98-rgb|prophoto-rgb|rec2020|xyz|xyz-d50|xyz-d65) (?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])) (?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])) (?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])))|^(?:((?:r(?!gb)|c(?!olor)|[abd-qs-z])[a-z]{2,5})\\( ?((?:\\d{0,3}\\.|)\\d{1,24}%?)(?:, ?| )((?:\\d{0,3}\\.|)\\d{1,24}%?)(?:, ?| )((?:\\d{0,3}\\.|)\\d{1,24}%?))))(?:(?:,| \\/| ) ?(?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])))?(?:\\)| |))[^\\S]*$/,\n\n\n    parsley: function (slices) {\n\n      let slicePos = 0;\n      let sliceLast = 0;\n      let base = 10;\n      let divisor = 100.0;\n      let convertPct = 2.55;\n      let alpha = '1';\n\n\n      if (slices[23]) {\n        alpha = slices[23];\n        delete slices[23];\n      }\n                     // Set alpha before anything else\n      retArray[3] = (alpha.match(/%/g)) ?\n                    parseFloat(alpha) / divisor :\n                    parseFloat(alpha);\n\n                    //  determine first and last element\n      for (let k=1; k < slices.length; k++) { \n        if (slices[k]) {\n          slicePos = (slicePos) ? slicePos : k;\n          sliceLast = k;\n        }\n      }\n\n  switch (sliceLast) {\n\n    case 4:  // This is the 3-4 digit hex parsing\n      base = 16;\n      divisor = 15.0;\n      retArray[3] = parseInt(slices[sliceLast],base) / divisor ;\n    case 3:\n      base = 16;\n      for (let i = 0; i < 3; i++) {\n        retArray[i] = parseInt(slices[slicePos+i] + slices[slicePos+i],base);\n      }\n    break;\n\n    case 5:    // allows two digit hex to become grey\n      base = 16;\n    case 9:  // allows 1-3 digit INT with comma to become grey\n      retArray[0] = retArray[1] = retArray[2] = \n        (base == 10) ? parseFloat(slices[sliceLast]) : \n                       parseInt(slices[sliceLast],base);\n    break;\n\n    case 12:  // allows single percentage to become grey\n      retArray[0] = retArray[1] = retArray[2] = \n         parseFloat(slices[sliceLast]) * convertPct;\n    break;\n\n    case 8:  // These are the main parsings for hex and rgb()\n      base = 16;\n      divisor = 255.0;\n      retArray[3] = parseInt(slices[8],base) / divisor ;\n    case 7:\n      base = 16;\n    case 11:\n      for (let i = 0; i < 3; i++) {\n        retArray[i] = (base == 10) ? parseFloat(slices[slicePos+i]) :\n                                  parseInt(slices[slicePos+i],base);\n      }\n    break;\n\n    case 14: //  rgb() percentage\n      for (let i = 0; i < 3; i++) {\n        retArray[i] = parseFloat(slices[slicePos+i]) * convertPct;\n      }\n    break;\n    \n    case 18:  // This is for color() CSS 4\n      retArray[5] = slices[15];\n\n      for (let i = 0; i < 3; i++) { // color() is converted to 0.0-255.0\n        slicePos++;\n        retArray[i] = (slices[slicePos].match(/%/g)) ?\n            parseFloat(slices[slicePos]) * 2.55:\n            parseFloat(slices[slicePos]) * 255;  \n      }\n    break;\n\n    case 22: // This is the \"wild west\" section\n\n      retArray[5] = slices[slicePos];\n\n      for (let i = 0; i < 3; i++ ) {\n        slicePos++;\n        retArray[i] = (slices[slicePos]) ? (slices[slicePos].match(/%/g)) ?\n            parseFloat(slices[slicePos]) / divisor :\n            parseFloat(slices[slicePos]) : 0.0 ;\n      }\n\n          // Process for HSL and HWB\n      if (retArray[5].match(/^(?:hsla?|hwba?)/i) ) {\n        let sat,light,white,black,hwbFact;\n\n        let hue = retArray[0] % 360.0;\n        if (hue < 0) { hue += 360.0; }\n\n        if (retArray[5].match(/^hsla?/i) ) {\n          sat   = retArray[1];\n          light = retArray[2];\n          white = 0;\n          hwbFact = 1; \n        } else if (retArray[5].match(/^hwba?/i) ) {\n          white = retArray[1];\n          black = retArray[2];\n\n          if (white + black >= 1) {\n            retArray[0] = retArray[1] = retArray[2] = white / (white + black);\n            retArray[5] = 'sRGB';\n            break;\n          }\n\n          sat = 1.0;\n          light = 0.5;\n          hwbFact = (1.0 - white - black);\n        }\n\n        function f(n) {  // from CSS reference implementation\n          let k = (n + hue/30) % 12;\n          let a = sat * Math.min(light, 1 - light);\n          return light - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n        }\n\n        retArray[0] = Math.round(255 * (f(0) * hwbFact + white));\n        retArray[1] = Math.round(255 * (f(8) * hwbFact + white));\n        retArray[2] = Math.round(255 * (f(4) * hwbFact + white));\n        retArray[5] = 'sRGB';\n      }\n      break;\n      }\n      return true;\n    }  // close parsley sub-function\n  };  // close colorRex obj\n\n\n      //  The main call\n  let slicesProc = colorRex.rex.exec(colorString);\n\n  if (slicesProc) { // Error catch\n    \n    retArray[4] = isValid = colorRex.parsley(slicesProc); // set the isValid flag\n\n    return retArray;\n\n  } else {\n    isValid = false;\n    console.log('colorParsley error: unable to parse string')\n    return [0,0,0,0,isValid,'parsleyError']  // throw 'InvalidString'\n  }\n};\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////  BONUS STRING FORMATTING UTILITIES  \\////////////////////////////////////\n\n\n/////  ƒ  colorToHex()  ///////////////////////////////////////////////////\n\n    // returns hex string, 3,4,6, or 8 chars if that was entered, no #\n    // If alpha is 1 or empty, no alpha is returned i.e. abcf returns abc\n    \nexport function colorToHex (rgba = [0,0,0,''], allow3 = true) {\n    let R = Math.round(rgba[0]).toString(16).padStart(2, '0');\n    let G = Math.round(rgba[1]).toString(16).padStart(2, '0');\n    let B = Math.round(rgba[2]).toString(16).padStart(2, '0');\n    let A = (rgba[3] == '' || rgba[3] == 1) ? '' :\n             Math.round(rgba[3] * 255).toString(16).padStart(2, '0') ;\n\n         // this if returns a 3 character hex if possible - aabbcc becomes abc\n    if ( allow3 &&\n         parseInt(A, 16) % 17 == 0 &&\n         parseInt(A, 16) % 17 == 0 &&\n         parseInt(A, 16) % 17 == 0 &&\n         (parseInt(A, 16) % 17 == 0 || A == '')\n         ) {\n         return R.charAt(0) + G.charAt(0) + B.charAt(0) + A.charAt(0);\n    } else {\n      return R + G + B + A;\n    }\n}\n\n\n\n\n/////  ƒ  colorToRGB()  ///////////////////////////////////////////////////\n\n    // RGBAstr — returns rgb() or rgba() INT value string (0-255) no spaces\n    // If alpha is 1 or empty, no alpha is returned \n    \nexport function colorToRGB (rgba = [0,0,0,''], round = true) {\n    if (round) {\n      for (let i=0; i < 3; i++) {\n        rgba[i] = Math.round(rgba[i]);\n      } \n                // while RGB tuples round to int, A needs additional precision\n      rgba[3] = ( rgba[3] == '' || rgba[3] == 1) ? 1 :\n                  Math.trunc(rgba[3]*1000)*0.001; \n    }\n\n    return ( rgba[3] == '' || rgba[3] == 1) ? \n      'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')' :\n      'rgba(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ',' + rgba[3] + ')';\n}\n\n\n/////\\  END UTILITIES  ///////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n\n\n///\\                                      //////////////////////////////////////\n////\\                                    //////////////////////////////////////\n/////\\  END COLOR PARSLEY 0.1.8  BLOCK  //////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n\n","/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nconst base3 = (t, p1, p2, p3, p4) => {\n  const t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;\n  const t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n};\n\nconst bezlen = (x1, y1, x2, y2, x3, y3, x4, y4, z) => {\n  if (z == null) {\n    z = 1;\n  }\n  z = Math.max(0, Math.min(z, 1));\n  const z2 = z / 2;\n  const n = 12;\n  const Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];\n  const Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const ct = z2 * Tvalues[i] + z2;\n    const xbase = base3(ct, x1, x2, x3, x4);\n    const ybase = base3(ct, y1, y2, y3, y4);\n    const comb = xbase * xbase + ybase * ybase;\n    sum += Cvalues[i] * Math.sqrt(comb);\n  }\n  return z2 * sum;\n};\n\nconst findDotsAtSegment = (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) => {\n  const t1 = 1 - t;\n  const t12 = t1 * t1;\n  const t13 = t12 * t1;\n  const t2 = t * t;\n  const t3 = t2 * t;\n  const x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;\n  const y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n  return {x, y};\n};\n\nconst catmullRom2bezier = (crp, z) => {\n  const d = [];\n  let end = {x: +crp[0], y: +crp[1]};\n  for (let i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n    const p = [\n      {x: +crp[i - 2], y: +crp[i - 1]},\n      {x: +crp[i], y: +crp[i + 1]},\n      {x: +crp[i + 2], y: +crp[i + 3]},\n      {x: +crp[i + 4], y: +crp[i + 5]}\n    ];\n    if (z) {\n      if (!i) {\n        p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n      } else if (iLen - 4 === i) {\n        p[3] = {x: +crp[0], y: +crp[1]};\n      } else if (iLen - 2 === i) {\n        p[2] = {x: +crp[0], y: +crp[1]};\n        p[3] = {x: +crp[2], y: +crp[3]};\n      }\n    } else if (iLen - 4 === i) {\n      p[3] = p[2];\n    } else if (!i) {\n      p[0] = {x: +crp[i], y: +crp[i + 1]};\n    }\n    d.push([end.x, end.y, (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n    end = p[2];\n  }\n\n  return d;\n};\n\nconst bezlen2 = (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) => {\n  const n = 5;\n  let x0 = p1x;\n  let y0 = p1y;\n  let len = 0;\n  for (let i = 1; i < n; i++) {\n    const {x, y} = findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, i / n);\n    len += Math.hypot(x - x0, y - y0);\n    x0 = x;\n    y0 = y;\n  }\n  len += Math.hypot(p2x - x0, p2y - y0);\n  return len;\n};\n\nconst prepareCurve = (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) => {\n  const len = Math.floor(bezlen2(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) * 0.75);\n  const fs = [];\n  let oldi = 0;\n  for (let i = 0; i <= len; i++) {\n    const t = i / len;\n    const xy = findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t);\n    const index = Math.round(xy.x);\n    fs[index] = xy.y;\n    if (index - oldi > 1) {\n      const s = fs[oldi];\n      const f = fs[index];\n      for (let j = oldi + 1; j < index; j++) {\n        fs[j] = s + ((f - s) / (index - oldi)) * (j - oldi);\n      }\n    }\n    oldi = index;\n  }\n  return (x) => fs[Math.round(x)] || null;\n};\n\nexport {bezlen, findDotsAtSegment, prepareCurve, catmullRom2bezier};\n","/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport chroma from 'chroma-js';\nimport {colorSpaces, createScale} from './utils.js';\n\nclass Color {\n  constructor({name, colorKeys, colorspace = 'RGB', ratios, smooth = false, output = 'HEX', saturation = 100}) {\n    this._name = name;\n    this._colorKeys = colorKeys;\n    this._modifiedKeys = colorKeys;\n    this._colorspace = colorspace;\n    this._ratios = ratios;\n    this._smooth = smooth;\n    this._output = output;\n    this._saturation = saturation;\n\n    if (!this._name) {\n      throw new Error('Color missing name');\n    }\n    if (!this._colorKeys) {\n      throw new Error('Color Keys are undefined');\n    }\n    if (!colorSpaces[this._colorspace]) {\n      throw new Error(`Colorspace “${colorspace}” not supported`);\n    }\n    if (!colorSpaces[this._output]) {\n      throw new Error(`Output “${colorspace}” not supported`);\n    }\n    // validate color keys\n    for (let i = 0; i < this._colorKeys.length; i++) {\n      if (!chroma.valid(this._colorKeys[i])) {\n        throw new Error(`Invalid Color Key “${this._colorKeys[i]}”`);\n      }\n    }\n\n    // Run function to generate this array of colors:\n    this._colorScale = null;\n  }\n\n  // Setting and getting properties of the Color class\n  set colorKeys(colorKeys) {\n    this._colorKeys = colorKeys;\n    this._updateColorSaturation();\n  }\n\n  get colorKeys() {\n    return this._colorKeys;\n  }\n\n  set saturation(saturation) {\n    this._saturation = saturation;\n    this._updateColorSaturation();\n  }\n\n  get saturation() {\n    return this._saturation;\n  }\n\n  set colorspace(colorspace) {\n    this._colorspace = colorspace;\n    this._generateColorScale();\n  }\n\n  get colorspace() {\n    return this._colorspace;\n  }\n\n  set ratios(ratios) {\n    this._ratios = ratios;\n  }\n\n  get ratios() {\n    return this._ratios;\n  }\n\n  set name(name) {\n    this._name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set smooth(smooth) {\n    if (smooth === true || smooth === 'true') this._smooth = smooth;\n    else this._smooth = false;\n\n    this._generateColorScale();\n  }\n\n  get smooth() {\n    return this._smooth;\n  }\n\n  set output(output) {\n    this._output = output;\n    this._colorScale = null;\n  }\n\n  get output() {\n    return this._output;\n  }\n\n  get colorScale() {\n    if (!this._colorScale) {\n      this._generateColorScale();\n    }\n    return this._colorScale;\n  }\n\n  _updateColorSaturation() {\n    let newColorKeys = [];\n    this._colorKeys.forEach((key) => {\n      let currentOklch = chroma(`${key}`).oklch();\n      let currentSaturation = currentOklch[1];\n      let newSaturation = currentSaturation * (this._saturation / 100);\n      let newOklch = chroma.oklch(currentOklch[0], newSaturation, currentOklch[2]);\n      let newColor = chroma.rgb(newOklch).hex();\n      newColorKeys.push(newColor);\n    });\n    // set color keys with new modified array\n    this._modifiedKeys = newColorKeys;\n\n    this._generateColorScale();\n  }\n\n  _generateColorScale() {\n    // This would create 3000 color values based on all parameters\n    // and return an array of colors:\n    this._colorScale = createScale({\n      swatches: 3000,\n      colorKeys: this._modifiedKeys,\n      colorspace: this._colorspace,\n      shift: 1,\n      smooth: this._smooth,\n      asFun: true\n    });\n  }\n}\nexport {Color};\n","/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {hsluvArray, convertColorValue, createScale, removeDuplicates} from './utils.js';\n\nimport {Color} from './color.js';\n\nclass BackgroundColor extends Color {\n  get backgroundColorScale() {\n    if (!this._backgroundColorScale) {\n      this._generateColorScale();\n    }\n    return this._backgroundColorScale;\n  }\n\n  _generateColorScale() {\n    // This would create a 100 color value array based on all parameters,\n    // which can be used for sliding lightness as a background color\n\n    // Call original generateColorScale method in the context of our background color\n    // Then we can run the code for Color, but we've added in more below.\n    Color.prototype._generateColorScale.call(this);\n\n    // create massive scale\n    const backgroundColorScale = createScale({\n      swatches: 1000,\n      colorKeys: this._colorKeys,\n      colorspace: this._colorspace,\n      shift: 1,\n      smooth: this._smooth\n    });\n\n    // Inject original keycolors to ensure they are present in the background options\n    backgroundColorScale.push(...this.colorKeys);\n\n    const colorObj = backgroundColorScale\n      // Convert to HSLuv and keep track of original indices\n      .map((c, i) => ({value: Math.round(hsluvArray(c)[2]), index: i}));\n\n    const colorObjFiltered = removeDuplicates(colorObj, 'value');\n\n    const bgColorArrayFiltered = colorObjFiltered.map((data) => backgroundColorScale[data.index]);\n\n    // Manually cap the background array at 100 colors, then add white back to the end\n    // since it sometimes gets removed.\n    if (bgColorArrayFiltered.length >= 101) {\n      bgColorArrayFiltered.length = 100;\n      bgColorArrayFiltered.push('#ffffff');\n    }\n\n    this._backgroundColorScale = bgColorArrayFiltered.map((color) => convertColorValue(color, this._output));\n\n    return this._backgroundColorScale;\n  }\n}\nexport {BackgroundColor};\n","/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the 'License');\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport chroma from 'chroma-js';\n\nimport {colorSpaces, convertColorValue, multiplyRatios, ratioName, round, searchColors} from './utils.js';\n\nimport {BackgroundColor} from './backgroundcolor.js';\n\nclass Theme {\n  constructor({colors, backgroundColor, lightness, contrast = 1, saturation = 100, output = 'HEX', formula = 'wcag2'}) {\n    this._output = output;\n    this._colors = colors;\n    this._lightness = lightness;\n    this._saturation = saturation;\n    this._formula = formula;\n\n    this._setBackgroundColor(backgroundColor);\n    this._setBackgroundColorValue();\n\n    this._contrast = contrast;\n    if (!this._colors) {\n      throw new Error('No colors are defined');\n    }\n    if (!this._backgroundColor) {\n      throw new Error('Background color is undefined');\n    }\n    colors.forEach((color) => {\n      if (!color.ratios) throw new Error(`Color ${color.name}'s ratios are undefined`);\n    });\n    if (!colorSpaces[this._output]) {\n      throw new Error(`Output “${output}” not supported`);\n    }\n\n    // Only run the update if saturation is set below 100%\n    if (this._saturation < 100) this._updateColorSaturation(this._saturation);\n\n    this._findContrastColors();\n    this._findContrastColorPairs();\n    this._findContrastColorValues();\n  }\n\n  set formula(formula) {\n    this._formula = formula;\n    this._findContrastColors();\n  }\n\n  get formula() {\n    return this._formula;\n  }\n\n  set contrast(contrast) {\n    this._contrast = contrast;\n    this._findContrastColors();\n  }\n\n  get contrast() {\n    return this._contrast;\n  }\n\n  set lightness(lightness) {\n    this._lightness = lightness;\n    this._setBackgroundColor(this._backgroundColor);\n    this._findContrastColors();\n  }\n\n  get lightness() {\n    return this._lightness;\n  }\n\n  set saturation(saturation) {\n    this._saturation = saturation;\n    // Update all colors key colors\n    this._updateColorSaturation(saturation);\n    this._findContrastColors();\n  }\n\n  get saturation() {\n    return this._saturation;\n  }\n\n  set backgroundColor(backgroundColor) {\n    this._setBackgroundColor(backgroundColor);\n    this._findContrastColors();\n  }\n\n  get backgroundColorValue() {\n    return this._backgroundColorValue;\n  }\n\n  get backgroundColor() {\n    return this._backgroundColor;\n  }\n\n  // Add a getter and setter for colors\n  set colors(colors) {\n    this._colors = colors;\n    this._findContrastColors();\n  }\n\n  get colors() {\n    return this._colors;\n  }\n\n  // add individual new colors\n  set addColor(color) {\n    this._colors.push(color);\n    this._findContrastColors();\n  }\n  // remove individual colors\n  set removeColor(color) {\n    const filteredColors = this._colors.filter((entry) => {\n      return entry.name !== color.name;\n    });\n    this._colors = filteredColors;\n    this._findContrastColors();\n  }\n  // modify individual colors\n  set updateColor(param) {\n    // pass arguments in the format updateColor: {color: 'ColorToChange', [propertyToChange]: 'newValue'}\n    // eg, changing the name of a color: updateColor: {color: 'blue', name: 'cerulean'}\n    // If param is an array, loop through each object, otherwise execute once\n    if (Array.isArray(param)) {\n      for (let i = 0; i < param.length; i++) {\n        let currentColor = this._colors.filter((entry) => {\n          return entry.name === param[i].color;\n        });\n        currentColor = currentColor[0];\n        let index = this._colors.indexOf(currentColor);\n        const filteredColors = this._colors.filter((entry) => {\n          return entry.name !== param[i].color;\n        });\n        if (param[i].name) currentColor.name = param[i].name;\n        if (param[i].colorKeys) currentColor.colorKeys = param[i].colorKeys;\n        if (param[i].ratios) currentColor.ratios = param[i].ratios;\n        if (param[i].colorspace) currentColor.colorspace = param[i].colorspace;\n        if (param[i].smooth) currentColor.smooth = param[i].smooth;\n        // call _generateColorScale to ensure scale is updated with new params\n        currentColor._generateColorScale();\n\n        // Add the updated color into the filtered array at original index\n        filteredColors.splice(index, 0, currentColor);\n        this._colors = filteredColors;\n      }\n    } else {\n      let currentColor = this._colors.filter((entry) => {\n        return entry.name === param.color;\n      });\n      currentColor = currentColor[0];\n      let index = this._colors.indexOf(currentColor);\n      const filteredColors = this._colors.filter((entry) => {\n        return entry.name !== param.color;\n      });\n      if (param.name) currentColor.name = param.name;\n      if (param.colorKeys) currentColor.colorKeys = param.colorKeys;\n      if (param.ratios) currentColor.ratios = param.ratios;\n      if (param.colorspace) currentColor.colorspace = param.colorspace;\n      if (param.smooth) currentColor.smooth = param.smooth;\n      // call _generateColorScale to ensure scale is updated with new params\n      currentColor._generateColorScale();\n\n      // Add the updated color into the filtered array at original index\n      filteredColors.splice(index, 0, currentColor);\n      this._colors = filteredColors;\n    }\n\n    this._findContrastColors();\n  }\n\n  set output(output) {\n    this._output = output;\n    this._colors.forEach((element) => {\n      element.output = this._output;\n    });\n    this._backgroundColor.output = this._output;\n\n    this._findContrastColors();\n  }\n\n  get output() {\n    return this._output;\n  }\n\n  get contrastColors() {\n    return this._contrastColors;\n  }\n\n  get contrastColorPairs() {\n    return this._contrastColorPairs;\n  }\n\n  get contrastColorValues() {\n    return this._contrastColorValues;\n  }\n\n  _setBackgroundColor(backgroundColor) {\n    if (typeof backgroundColor === 'string') {\n      // If it's a string, convert to Color object and assign lightness.\n      const newBackgroundColor = new BackgroundColor({\n        name: 'background',\n        colorKeys: [backgroundColor],\n        output: 'RGB'\n      });\n      const calcLightness = round(chroma(String(backgroundColor)).hsluv()[2]);\n\n      this._backgroundColor = newBackgroundColor;\n      this._lightness = calcLightness;\n      this._backgroundColorValue = newBackgroundColor[this._lightness];\n    } else {\n      backgroundColor.output = 'RGB';\n      const calcBackgroundColorValue = backgroundColor.backgroundColorScale[this._lightness];\n\n      this._backgroundColor = backgroundColor;\n      this._backgroundColorValue = calcBackgroundColorValue;\n    }\n  }\n\n  _setBackgroundColorValue() {\n    this._backgroundColorValue = this._backgroundColor.backgroundColorScale[this._lightness];\n  }\n\n  _updateColorSaturation(saturation) {\n    this._colors.map((color) => {\n      color.saturation = saturation;\n    });\n  }\n\n  _findContrastColors() {\n    const bgRgbArray = chroma(String(this._backgroundColorValue)).rgb();\n    const baseV = this._lightness / 100;\n    const convertedBackgroundColorValue = convertColorValue(this._backgroundColorValue, this._output);\n    const baseObj = {background: convertedBackgroundColorValue};\n\n    const returnColors = []; // Array to be populated with JSON objects for each color, including names & contrast values\n    const returnColorValues = []; // Array to be populated with flat list of all color values\n    const returnColorPairs = {...baseObj}; // Objext to be populated with flat list of all color values as named key-value pairs\n    returnColors.push(baseObj);\n\n    this._colors.map((color) => {\n      if (color.ratios !== undefined) {\n        let swatchNames;\n        const newArr = [];\n        const colorObj = {\n          name: color.name,\n          values: newArr\n        };\n\n        let ratioValues;\n\n        if (Array.isArray(color.ratios)) {\n          ratioValues = color.ratios;\n        } else if (!Array.isArray(color.ratios)) {\n          swatchNames = Object.keys(color.ratios);\n          ratioValues = Object.values(color.ratios);\n        }\n\n        // modify target ratio based on contrast multiplier\n        ratioValues = ratioValues.map((ratio) => multiplyRatios(+ratio, this._contrast));\n\n        const contrastColors = searchColors(color, bgRgbArray, baseV, ratioValues, this._formula).map((clr) => convertColorValue(clr, this._output));\n\n        for (let i = 0; i < contrastColors.length; i++) {\n          let n;\n          if (!swatchNames) {\n            const rVal = ratioName(color.ratios, this._formula)[i];\n            n = color.name.concat(rVal).replace(/\\s+/g, ''); // concat with ratio name and remove any spaces from original name\n          } else {\n            n = swatchNames[i];\n          }\n\n          const obj = {\n            name: n,\n            contrast: ratioValues[i],\n            value: contrastColors[i]\n          };\n          newArr.push(obj);\n          // Push the same values to the returnColorPairs object\n          returnColorPairs[n] = contrastColors[i];\n          // Push the same value to the returnColorValues array\n          returnColorValues.push(contrastColors[i]);\n        }\n        returnColors.push(colorObj);\n      }\n      return null;\n    });\n    this._contrastColorValues = returnColorValues;\n    this._contrastColorPairs = returnColorPairs;\n    this._contrastColors = returnColors;\n    return this._contrastColors;\n  }\n\n  _findContrastColorPairs() {\n    return this._contrastColorPairs;\n  }\n\n  _findContrastColorValues() {\n    return this._contrastColorValues;\n  }\n}\n\nexport {Theme};\n"],"names":[],"version":3,"file":"tools.7548764c.js.map"}